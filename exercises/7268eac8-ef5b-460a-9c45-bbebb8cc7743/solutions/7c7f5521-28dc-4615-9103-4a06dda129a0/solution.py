import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from datetime import datetime, timedelta class EnvironmentalAnalysisSuite: def __init__(self): self.data = {} self.alerts = {} self.models = {} def add_environmental_data(self, location, measurements): """Add environmental measurements for a location""" self.data[location] = pd.DataFrame(measurements) self.data[location].set_index('timestamp', inplace=True) self._calculate_indicators(location) def _calculate_indicators(self, location): """Calculate environmental indicators""" df = self.data[location] # Temperature anomalies df['temp_anomaly'] = df['temperature'] - df['temperature'].mean() # Trend calculations df['temp_trend'] = df['temperature'].rolling(window=12).mean() # Rate of change df['temp_change_rate'] = df['temperature'].diff() # Volatility df['temp_volatility'] = df['temperature'].rolling(window=12).std() def create_dashboard(self, location): """Create comprehensive visualization dashboard""" df = self.data[location] fig = plt.figure(figsize=(15, 10)) # Temperature Trends ax1 = plt.subplot(2, 2, 1) ax1.plot(df.index, df['temperature'], label='Temperature') ax1.plot(df.index, df['temp_trend'], label='Trend') ax1.set_title(f'{location} Temperature Trends') ax1.legend() # Temperature Anomalies ax2 = plt.subplot(2, 2, 2) ax2.bar(df.index, df['temp_anomaly']) ax2.set_title('Temperature Anomalies') # Change Rates ax3 = plt.subplot(2, 2, 3) ax3.plot(df.index, df['temp_change_rate']) ax3.axhline(y=0, color='r', linestyle='--') ax3.set_title('Temperature Change Rate') # Volatility ax4 = plt.subplot(2, 2, 4) ax4.plot(df.index, df['temp_volatility']) ax4.set_title('Temperature Volatility') plt.tight_layout() plt.show() def predict_trends(self, location, months_ahead=12): """Predict future environmental trends""" df = self.data[location] X = np.arange(len(df)).reshape(-1, 1) y = df['temperature'].values model = LinearRegression() model.fit(X, y) future_months = np.arange(len(df), len(df) + months_ahead).reshape(-1, 1) predictions = model.predict(future_months) print(f"\nTemperature Predictions for next {months_ahead} months in {location}:") for month, temp in enumerate(predictions, 1): print(f"Month {month}: {temp:.2f}Â°C") def set_alert_threshold(self, location, indicator, threshold, alert_type='above'): """Set environmental alert thresholds""" self.alerts[location] = { 'indicator': indicator, 'threshold': threshold, 'type': alert_type } def check_alerts(self, location): """Check if any environmental alerts should be triggered""" if location in self.alerts: alert = self.alerts[location] df = self.data[location] current_value = df[alert['indicator']].iloc[-1] if alert['type'] == 'above' and current_value > alert['threshold']: print(f"ALERT: {location} {alert['indicator']} ({current_value:.2f}) above threshold {alert['threshold']:.2f}") elif alert['type'] == 'below' and current_value < alert['threshold']: print(f"ALERT: {location} {alert['indicator']} ({current_value:.2f}) below threshold {alert['threshold']:.2f}")