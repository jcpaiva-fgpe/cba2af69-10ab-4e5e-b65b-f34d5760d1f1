import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from datetime import datetime, timedelta class CryptoAnalysisSuite: def __init__(self): self.data = {} self.alerts = {} self.models = {} def add_crypto_data(self, symbol, prices, volumes, timestamps): """Add historical data for a cryptocurrency""" self.data[symbol] = pd.DataFrame({ 'timestamp': timestamps, 'price': prices, 'volume': volumes }) self.data[symbol].set_index('timestamp', inplace=True) self._calculate_indicators(symbol) def _calculate_indicators(self, symbol): """Calculate technical indicators""" df = self.data[symbol] # Moving averages df['MA7'] = df['price'].rolling(window=7).mean() df['MA30'] = df['price'].rolling(window=30).mean() # Momentum df['momentum'] = df['price'].pct_change(periods=7) # Volatility df['volatility'] = df['price'].rolling(window=7).std() def create_dashboard(self, symbol): """Create comprehensive visualization dashboard""" df = self.data[symbol] fig = plt.figure(figsize=(15, 10)) # Price and Moving Averages ax1 = plt.subplot(2, 2, 1) ax1.plot(df.index, df['price'], label='Price') ax1.plot(df.index, df['MA7'], label='7-day MA') ax1.plot(df.index, df['MA30'], label='30-day MA') ax1.set_title(f'{symbol} Price and Moving Averages') ax1.legend() # Volume ax2 = plt.subplot(2, 2, 2) ax2.bar(df.index, df['volume']) ax2.set_title('Trading Volume') # Momentum ax3 = plt.subplot(2, 2, 3) ax3.plot(df.index, df['momentum']) ax3.axhline(y=0, color='r', linestyle='--') ax3.set_title('Price Momentum') # Volatility ax4 = plt.subplot(2, 2, 4) ax4.plot(df.index, df['volatility']) ax4.set_title('Price Volatility') plt.tight_layout() plt.show() def predict_price(self, symbol, days_ahead=7): """Predict future prices using linear regression""" df = self.data[symbol] X = np.arange(len(df)).reshape(-1, 1) y = df['price'].values model = LinearRegression() model.fit(X, y) future_days = np.arange(len(df), len(df) + days_ahead).reshape(-1, 1) predictions = model.predict(future_days) print(f"\nPrice Predictions for next {days_ahead} days:") for day, price in enumerate(predictions, 1): print(f"Day {day}: ${price:,.2f}") def set_price_alert(self, symbol, target_price, alert_type='above'): """Set price alerts""" self.alerts[symbol] = { 'target_price': target_price, 'type': alert_type } def check_alerts(self, symbol, current_price): """Check if any alerts should be triggered""" if symbol in self.alerts: alert = self.alerts[symbol] if alert['type'] == 'above' and current_price < alert['target_price']: print(f"ALERT: {symbol} price ${current_price:,.2f} above target ${alert['target_price']:,.2f}") elif alert['type'] == 'below' and current_price > alert['target_price']: print(f"ALERT: {symbol} price ${current_price:,.2f} below target ${alert['target_price']:,.2f}") # Example usage
if __name__ == "__main__": # Create sample data dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D') prices = np.random.normal(45000, 1000, len(dates)) # Sample BTC prices volumes = np.random.normal(1000, 100, len(dates)) # Sample volumes # Initialize and use the analysis suite analyzer = CryptoAnalysisSuite() analyzer.add_crypto_data('BTC', prices, volumes, dates) # Create visualizations analyzer.create_dashboard('BTC') # Make predictions analyzer.predict_price('BTC', days_ahead=7) # Set and check alerts analyzer.set_price_alert('BTC', 46000, 'above') analyzer.check_alerts('BTC', 46500)